/* tslint:disable */
/* eslint-disable */
/**
 * TTXX健康
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
    BiometricRecordDto,
    DietLogDto,
    ExerciseLogDto,
    HealthCheckReminderDto,
    HealthGoalDto,
    LoginDto,
    MedicationReminderDto, PostMedicationReminderPngRequest,
    RegisterDto,
    ResponseResult,
    ResponseResultBiometricRecordVo,
    ResponseResultExerciseLog,
    ResponseResultHealthCheckReminderDto,
    ResponseResultHealthGoal, ResponseResultListMedicationReminder, ResponseResultListMedicationReminderVo,
    ResponseResultLong,
    ResponseResultMapStringObject,
    ResponseResultMapStringString,
    ResponseResultPageBiometricRecordVo,
    ResponseResultPageDietLog,
    ResponseResultPageExerciseLog,
    ResponseResultPageHealthCheckReminder,
    ResponseResultPageMedicationReminder,
    ResponseResultPageSleepLog,
    ResponseResultSleepLog,
    ResponseResultVoid,
    SleepLogDto,
    UserInfoDto,
    UserInfoVo,
} from '../models/index';
import {
    BiometricRecordDtoToJSON,
    DietLogDtoToJSON,
    ExerciseLogDtoToJSON,
    HealthCheckReminderDtoToJSON,
    HealthGoalDtoToJSON,
    LoginDtoToJSON,
    MedicationReminderDtoToJSON, PostMedicationReminderPngRequestToJSON,
    RegisterDtoToJSON,
    ResponseResultBiometricRecordVoFromJSON,
    ResponseResultExerciseLogFromJSON,
    ResponseResultFromJSON,
    ResponseResultHealthCheckReminderDtoFromJSON,
    ResponseResultHealthGoalFromJSON,
    ResponseResultListMedicationReminderFromJSON,
    ResponseResultListMedicationReminderVoFromJSON,
    ResponseResultLongFromJSON,
    ResponseResultMapStringObjectFromJSON,
    ResponseResultMapStringStringFromJSON,
    ResponseResultPageBiometricRecordVoFromJSON,
    ResponseResultPageDietLogFromJSON,
    ResponseResultPageExerciseLogFromJSON,
    ResponseResultPageHealthCheckReminderFromJSON,
    ResponseResultPageMedicationReminderFromJSON,
    ResponseResultPageSleepLogFromJSON,
    ResponseResultSleepLogFromJSON,
    ResponseResultVoidFromJSON,
    SleepLogDtoToJSON,
    UserInfoDtoToJSON,
    UserInfoVoFromJSON,
} from '../models/index';

export interface DeleteDietLogIdRequest {
    logId: number;
}

export interface DeleteExerciseLogIdRequest {
    logId: number;
}

export interface DeleteHealthBiometricIdRequest {
    id: number;
}

export interface DeleteHealthCheckReminderReminderIdRequest {
    reminderId: number;
}

export interface DeleteHealthGoalsGoalIdRequest {
    goalId: number;
}

export interface DeleteMedicationReminderReminderIdRequest {
    reminderId: number;
}

export interface DeleteSleepLogIdRequest {
    logId: number;
}

export interface GetAnalysisStreamRequest {
    refresh?: boolean;
}

export interface GetDietDailyCaloriesRequest {
    range: string;
}

export interface GetDietPageRequest {
    startDate: string;
    endDate: string;
    pageNum?: number;
    pageSize?: number;
}

export interface GetExerciseRequest {
    startDate: string;
    endDate: string;
    pageNum?: number;
    pageSize?: number;
}

export interface GetExerciseDailyCaloriesBurnedRequest {
    range: GetExerciseDailyCaloriesBurnedRangeEnum;
}

export interface GetHealthChartRequest {
    timeRange?: string;
}

export interface GetHealthCheckReminderConfirmRequest {
    token: string;
}

export interface GetHealthCheckReminderListRequest {
    startDate?: Date;
    endDate?: Date;
    pageNum?: number;
    pageSize?: number;
}

export interface GetHealthRecordsRequest {
    startTime?: string;
    endTime?: string;
    pageNum?: number;
    pageSize?: number;
}

export interface GetMedicationReminderRequest {
    startDate?: string;
    endDate?: string;
    pageNum?: number;
    pageSize?: number;
}

export interface GetSleepDurationRequest {
    range?: GetSleepDurationRangeEnum;
}

export interface GetSleepPageRequest {
    startDate?: string;
    endDate?: string;
    pageNum?: number;
    pageSize?: number;
}

export interface PostApiAuthLoginRequest {
    loginDto?: LoginDto;
}

export interface PostApiAuthRegisterRequest {
    registerDto?: RegisterDto;
}

export interface PostApiAuthSendCodeRequest {
    email: string;
}

export interface PostDietRequest {
    dietLogDto?: DietLogDto;
}

export interface PostExerciseRequest {
    exerciseLogDto?: ExerciseLogDto;
}

export interface PostHealthBiometricRequest {
    biometricRecordDto?: BiometricRecordDto;
}

export interface PostHealthCheckReminderRequest {
    healthCheckReminderDto?: HealthCheckReminderDto;
}

export interface PostHealthGoalsRequest {
    healthGoalDto?: HealthGoalDto;
}

export interface PostMedicationReminderRequest {
    medicationReminderDto?: MedicationReminderDto;
}

export interface PostMedicationReminderBatchRequest {
    medicationReminderDto?: Array<MedicationReminderDto>;
}

export interface PostMedicationReminderPngOperationRequest {
    postMedicationReminderPngRequest?: PostMedicationReminderPngRequest;
}

export interface PostSleepRequest {
    sleepLogDto?: SleepLogDto;
}

export interface PutAccountRequest {
    userInfoDto?: UserInfoDto;
}

export interface PutHealthCheckReminderIdRequest {
    id: number;
    healthCheckReminderDto?: HealthCheckReminderDto;
}

export interface PutMedicationReminderReminderIdRequest {
    reminderId: number;
    medicationReminderDto?: MedicationReminderDto;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * 根据记录ID删除指定记录
     * 删除饮食记录
     */
    async deleteDietLogIdRaw(requestParameters: DeleteDietLogIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        if (requestParameters['logId'] == null) {
            throw new runtime.RequiredError(
                'logId',
                'Required parameter "logId" was null or undefined when calling deleteDietLogId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diet/{logId}`.replace(`{${"logId"}}`, encodeURIComponent(String(requestParameters['logId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 根据记录ID删除指定记录
     * 删除饮食记录
     */
    async deleteDietLogId(requestParameters: DeleteDietLogIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.deleteDietLogIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *
     * 删除运动记录
     */
    async deleteExerciseLogIdRaw(requestParameters: DeleteExerciseLogIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        if (requestParameters['logId'] == null) {
            throw new runtime.RequiredError(
                'logId',
                'Required parameter "logId" was null or undefined when calling deleteExerciseLogId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise/{logId}`.replace(`{${"logId"}}`, encodeURIComponent(String(requestParameters['logId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     *
     * 删除运动记录
     */
    async deleteExerciseLogId(requestParameters: DeleteExerciseLogIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.deleteExerciseLogIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 需要登录，id为对应的记录id
     * 删除生物特征记录
     */
    async deleteHealthBiometricIdRaw(requestParameters: DeleteHealthBiometricIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteHealthBiometricId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health/biometric/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 需要登录，id为对应的记录id
     * 删除生物特征记录
     */
    async deleteHealthBiometricId(requestParameters: DeleteHealthBiometricIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.deleteHealthBiometricIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 删除指定ID的体检提醒
     * 删除体检提醒
     */
    async deleteHealthCheckReminderReminderIdRaw(requestParameters: DeleteHealthCheckReminderReminderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        if (requestParameters['reminderId'] == null) {
            throw new runtime.RequiredError(
                'reminderId',
                'Required parameter "reminderId" was null or undefined when calling deleteHealthCheckReminderReminderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health-check-reminder/{reminderId}`.replace(`{${"reminderId"}}`, encodeURIComponent(String(requestParameters['reminderId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 删除指定ID的体检提醒
     * 删除体检提醒
     */
    async deleteHealthCheckReminderReminderId(requestParameters: DeleteHealthCheckReminderReminderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.deleteHealthCheckReminderReminderIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 删除目标
     */
    async deleteHealthGoalsGoalIdRaw(requestParameters: DeleteHealthGoalsGoalIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        if (requestParameters['goalId'] == null) {
            throw new runtime.RequiredError(
                'goalId',
                'Required parameter "goalId" was null or undefined when calling deleteHealthGoalsGoalId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health-goals/{goalId}`.replace(`{${"goalId"}}`, encodeURIComponent(String(requestParameters['goalId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 
     * 删除目标
     */
    async deleteHealthGoalsGoalId(requestParameters: DeleteHealthGoalsGoalIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.deleteHealthGoalsGoalIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 删除服药提醒
     */
    async deleteMedicationReminderReminderIdRaw(requestParameters: DeleteMedicationReminderReminderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        if (requestParameters['reminderId'] == null) {
            throw new runtime.RequiredError(
                'reminderId',
                'Required parameter "reminderId" was null or undefined when calling deleteMedicationReminderReminderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medication-reminder/{reminderId}`.replace(`{${"reminderId"}}`, encodeURIComponent(String(requestParameters['reminderId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 
     * 删除服药提醒
     */
    async deleteMedicationReminderReminderId(requestParameters: DeleteMedicationReminderReminderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.deleteMedicationReminderReminderIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据记录ID删除指定记录
     * 删除睡眠记录
     */
    async deleteSleepLogIdRaw(requestParameters: DeleteSleepLogIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        if (requestParameters['logId'] == null) {
            throw new runtime.RequiredError(
                'logId',
                'Required parameter "logId" was null or undefined when calling deleteSleepLogId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sleep/{logId}`.replace(`{${"logId"}}`, encodeURIComponent(String(requestParameters['logId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 根据记录ID删除指定记录
     * 删除睡眠记录
     */
    async deleteSleepLogId(requestParameters: DeleteSleepLogIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.deleteSleepLogIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取当前登录用户的详细信息
     * 获取用户信息
     */
    async getAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfoVo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoVoFromJSON(jsonValue));
    }

    /**
     * 获取当前登录用户的详细信息
     * 获取用户信息
     */
    async getAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfoVo> {
        const response = await this.getAccountRaw(initOverrides);
        return await response.value();
    }

    /**
     * 流式获取当前用户的健康数据分析结果，支持实时生成或使用缓存
     * 获取分析数据
     */
    async getAnalysisStreamRaw(requestParameters: GetAnalysisStreamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters['refresh'] != null) {
            queryParameters['refresh'] = requestParameters['refresh'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analysis/stream`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 流式获取当前用户的健康数据分析结果，支持实时生成或使用缓存
     * 获取分析数据
     */
    async getAnalysisStream(requestParameters: GetAnalysisStreamRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        return (await this.getAnalysisStreamRaw(requestParameters, initOverrides)).raw;
    }

    /**
     * 检查当前用户是否处于登录状态
     * 检查是否登录
     */
    async getApiAuthCheckLoginRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/checkLogin`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 检查当前用户是否处于登录状态
     * 检查是否登录
     */
    async getApiAuthCheckLogin(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.getApiAuthCheckLoginRaw(initOverrides);
        return await response.value();
    }

    /**
     * 按时间范围获取每日饮食热量统计数据
     * 获取每日饮食热量统计
     */
    async getDietDailyCaloriesRaw(requestParameters: GetDietDailyCaloriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultMapStringObject>> {
        if (requestParameters['range'] == null) {
            throw new runtime.RequiredError(
                'range',
                'Required parameter "range" was null or undefined when calling getDietDailyCalories().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['range'] != null) {
            queryParameters['range'] = requestParameters['range'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diet/daily-calories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultMapStringObjectFromJSON(jsonValue));
    }

    /**
     * 按时间范围获取每日饮食热量统计数据
     * 获取每日饮食热量统计
     */
    async getDietDailyCalories(requestParameters: GetDietDailyCaloriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultMapStringObject> {
        const response = await this.getDietDailyCaloriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 返回当前用户今天的总饮食热量
     * 获取今天的饮食热量
     */
    async getDietHotTodayRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diet/hot_today`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 返回当前用户今天的总饮食热量
     * 获取今天的饮食热量
     */
    async getDietHotToday(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.getDietHotTodayRaw(initOverrides);
        return await response.value();
    }

    /**
     * 支持按日期范围筛选
     * 分页查询饮食记录
     */
    async getDietPageRaw(requestParameters: GetDietPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultPageDietLog>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling getDietPage().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling getDietPage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any);
        }

        if (requestParameters['pageNum'] != null) {
            queryParameters['pageNum'] = requestParameters['pageNum'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diet/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultPageDietLogFromJSON(jsonValue));
    }

    /**
     * 支持按日期范围筛选
     * 分页查询饮食记录
     */
    async getDietPage(requestParameters: GetDietPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultPageDietLog> {
        const response = await this.getDietPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 分页查询运动记录
     */
    async getExerciseRaw(requestParameters: GetExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultPageExerciseLog>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling getExercise().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling getExercise().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any);
        }

        if (requestParameters['pageNum'] != null) {
            queryParameters['pageNum'] = requestParameters['pageNum'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultPageExerciseLogFromJSON(jsonValue));
    }

    /**
     * 
     * 分页查询运动记录
     */
    async getExercise(requestParameters: GetExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultPageExerciseLog> {
        const response = await this.getExerciseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 按时间范围获取每日运动消耗热量统计数据，返回格式符合ECharts图表要求
     * 获取每日运动消耗热量统计
     */
    async getExerciseDailyCaloriesBurnedRaw(requestParameters: GetExerciseDailyCaloriesBurnedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['range'] == null) {
            throw new runtime.RequiredError(
                'range',
                'Required parameter "range" was null or undefined when calling getExerciseDailyCaloriesBurned().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['range'] != null) {
            queryParameters['range'] = requestParameters['range'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise/daily-calories-burned`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 按时间范围获取每日运动消耗热量统计数据，返回格式符合ECharts图表要求
     * 获取每日运动消耗热量统计
     */
    async getExerciseDailyCaloriesBurned(requestParameters: GetExerciseDailyCaloriesBurnedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getExerciseDailyCaloriesBurnedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 获取最新的运动记录
     */
    async getExerciseLatestRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultExerciseLog>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise/latest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultExerciseLogFromJSON(jsonValue));
    }

    /**
     * 
     * 获取最新的运动记录
     */
    async getExerciseLatest(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultExerciseLog> {
        const response = await this.getExerciseLatestRaw(initOverrides);
        return await response.value();
    }

    /**
     * 导出当前用户的生物特征数据到Excel文件
     * 导出健康数据
     */
    async getExportBiometricRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/export/biometric`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 导出当前用户的生物特征数据到Excel文件
     * 导出健康数据
     */
    async getExportBiometric(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getExportBiometricRaw(initOverrides);
    }

    /**
     * 导出当前用户的饮食日志数据到Excel文件
     * 导出饮食数据
     */
    async getExportDietRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/export/diet`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 导出当前用户的饮食日志数据到Excel文件
     * 导出饮食数据
     */
    async getExportDiet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getExportDietRaw(initOverrides);
    }

    /**
     * 导出当前用户的运动日志数据到Excel文件
     * 导出运动数据
     */
    async getExportExerciseRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/export/exercise`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 导出当前用户的运动日志数据到Excel文件
     * 导出运动数据
     */
    async getExportExercise(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getExportExerciseRaw(initOverrides);
    }

    /**
     * 导出当前用户的睡眠日志数据到Excel文件
     * 导出睡眠数据
     */
    async getExportSleepRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/export/sleep`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 导出当前用户的睡眠日志数据到Excel文件
     * 导出睡眠数据
     */
    async getExportSleep(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getExportSleepRaw(initOverrides);
    }

    /**
     * 获取指定时间范围内的生物特征数据用于图表展示。支持七天、一个月、三个月和半年的数据范围。返回的数据包括体重、血压、血糖、血脂和BMI等指标的时间序列数据，可直接用于前端图表展示。
     * 获取生物特征图表数据
     */
    async getHealthChartRaw(requestParameters: GetHealthChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResult>> {
        const queryParameters: any = {};

        if (requestParameters['timeRange'] != null) {
            queryParameters['timeRange'] = requestParameters['timeRange'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health/chart`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultFromJSON(jsonValue));
    }

    /**
     * 获取指定时间范围内的生物特征数据用于图表展示。支持七天、一个月、三个月和半年的数据范围。返回的数据包括体重、血压、血糖、血脂和BMI等指标的时间序列数据，可直接用于前端图表展示。
     * 获取生物特征图表数据
     */
    async getHealthChart(requestParameters: GetHealthChartRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResult> {
        const response = await this.getHealthChartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取当前用户最近一次未完成的体检提醒
     * 获取最近一次体检提醒信息
     */
    async getHealthCheckReminderRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultHealthCheckReminderDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health-check-reminder`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultHealthCheckReminderDtoFromJSON(jsonValue));
    }

    /**
     * 获取当前用户最近一次未完成的体检提醒
     * 获取最近一次体检提醒信息
     */
    async getHealthCheckReminder(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultHealthCheckReminderDto> {
        const response = await this.getHealthCheckReminderRaw(initOverrides);
        return await response.value();
    }

    /**
     * 通过令牌确认完成体检
     * 确认体检提醒
     */
    async getHealthCheckReminderConfirmRaw(requestParameters: GetHealthCheckReminderConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling getHealthCheckReminderConfirm().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health-check-reminder/confirm`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 通过令牌确认完成体检
     * 确认体检提醒
     */
    async getHealthCheckReminderConfirm(requestParameters: GetHealthCheckReminderConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.getHealthCheckReminderConfirmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页获取当前用户的体检提醒列表，可按日期范围筛选
     * 获取体检提醒列表
     */
    async getHealthCheckReminderListRaw(requestParameters: GetHealthCheckReminderListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultPageHealthCheckReminder>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['pageNum'] != null) {
            queryParameters['pageNum'] = requestParameters['pageNum'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health-check-reminder/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultPageHealthCheckReminderFromJSON(jsonValue));
    }

    /**
     * 分页获取当前用户的体检提醒列表，可按日期范围筛选
     * 获取体检提醒列表
     */
    async getHealthCheckReminderList(requestParameters: GetHealthCheckReminderListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultPageHealthCheckReminder> {
        const response = await this.getHealthCheckReminderListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 触发体检提醒处理逻辑（仅用于测试）
     * 测试处理提醒
     */
    async getHealthCheckReminderTestRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health-check-reminder/test`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 触发体检提醒处理逻辑（仅用于测试）
     * 测试处理提醒
     */
    async getHealthCheckReminderTest(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.getHealthCheckReminderTestRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * 获取当前目标
     */
    async getHealthGoalsCurrentRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultHealthGoal>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health-goals/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultHealthGoalFromJSON(jsonValue));
    }

    /**
     * 
     * 获取当前目标
     */
    async getHealthGoalsCurrent(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultHealthGoal> {
        const response = await this.getHealthGoalsCurrentRaw(initOverrides);
        return await response.value();
    }

    /**
     * 获取当前用户最新的一条生物特征记录
     * 获取最新一次生物特征记录
     */
    async getHealthLatestRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultBiometricRecordVo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health/latest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultBiometricRecordVoFromJSON(jsonValue));
    }

    /**
     * 获取当前用户最新的一条生物特征记录
     * 获取最新一次生物特征记录
     */
    async getHealthLatest(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultBiometricRecordVo> {
        const response = await this.getHealthLatestRaw(initOverrides);
        return await response.value();
    }

    /**
     * 获取当前用户的生物特征记录，支持日期范围筛选
     * 分页获取生物特征记录
     */
    async getHealthRecordsRaw(requestParameters: GetHealthRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultPageBiometricRecordVo>> {
        const queryParameters: any = {};

        if (requestParameters['startTime'] != null) {
            queryParameters['startTime'] = (requestParameters['startTime'] as any);
        }

        if (requestParameters['endTime'] != null) {
            queryParameters['endTime'] = (requestParameters['endTime'] as any);
        }

        if (requestParameters['pageNum'] != null) {
            queryParameters['pageNum'] = requestParameters['pageNum'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health/records`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultPageBiometricRecordVoFromJSON(jsonValue));
    }

    /**
     * 获取当前用户的生物特征记录，支持日期范围筛选
     * 分页获取生物特征记录
     */
    async getHealthRecords(requestParameters: GetHealthRecordsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultPageBiometricRecordVo> {
        const response = await this.getHealthRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 获取服药提醒列表
     */
    async getMedicationReminderRaw(requestParameters: GetMedicationReminderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultPageMedicationReminder>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any);
        }

        if (requestParameters['pageNum'] != null) {
            queryParameters['pageNum'] = requestParameters['pageNum'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medication-reminder`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultPageMedicationReminderFromJSON(jsonValue));
    }

    /**
     * 
     * 获取服药提醒列表
     */
    async getMedicationReminder(requestParameters: GetMedicationReminderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultPageMedicationReminder> {
        const response = await this.getMedicationReminderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 获取下次最近服药时间的提醒
     */
    async getMedicationReminderNextRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultListMedicationReminder>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medication-reminder/next`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultListMedicationReminderFromJSON(jsonValue));
    }

    /**
     * 
     * 获取下次最近服药时间的提醒
     */
    async getMedicationReminderNext(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultListMedicationReminder> {
        const response = await this.getMedicationReminderNextRaw(initOverrides);
        return await response.value();
    }

    /**
     * 返回指定时间范围内每天的睡眠时长数据，用于生成柱状图，所对应的地址：https://echarts.apache.org/examples/zh/editor.html?c=bar-tick-align
     * 获取每日睡眠时长数据
     */
    async getSleepDurationRaw(requestParameters: GetSleepDurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters['range'] != null) {
            queryParameters['range'] = requestParameters['range'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sleep/duration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 返回指定时间范围内每天的睡眠时长数据，用于生成柱状图，所对应的地址：https://echarts.apache.org/examples/zh/editor.html?c=bar-tick-align
     * 获取每日睡眠时长数据
     */
    async getSleepDuration(requestParameters: GetSleepDurationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getSleepDurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 获取最新一次睡眠数据
     */
    async getSleepLatestRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultSleepLog>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sleep/latest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultSleepLogFromJSON(jsonValue));
    }

    /**
     * 
     * 获取最新一次睡眠数据
     */
    async getSleepLatest(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultSleepLog> {
        const response = await this.getSleepLatestRaw(initOverrides);
        return await response.value();
    }

    /**
     * 支持按入睡时间范围筛选
     * 分页查询睡眠记录
     */
    async getSleepPageRaw(requestParameters: GetSleepPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultPageSleepLog>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any);
        }

        if (requestParameters['pageNum'] != null) {
            queryParameters['pageNum'] = requestParameters['pageNum'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sleep/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultPageSleepLogFromJSON(jsonValue));
    }

    /**
     * 支持按入睡时间范围筛选
     * 分页查询睡眠记录
     */
    async getSleepPage(requestParameters: GetSleepPageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultPageSleepLog> {
        const response = await this.getSleepPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用用户名/邮箱登录获取Token
     * 用户登录
     */
    async postApiAuthLoginRaw(requestParameters: PostApiAuthLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultMapStringString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDtoToJSON(requestParameters['loginDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultMapStringStringFromJSON(jsonValue));
    }

    /**
     * 使用用户名/邮箱登录获取Token
     * 用户登录
     */
    async postApiAuthLogin(requestParameters: PostApiAuthLoginRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultMapStringString> {
        const response = await this.postApiAuthLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 退出当前用户的登录状态
     * 退出登录
     */
    async postApiAuthLogoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 退出当前用户的登录状态
     * 退出登录
     */
    async postApiAuthLogout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.postApiAuthLogoutRaw(initOverrides);
        return await response.value();
    }

    /**
     * 使用邮箱验证码完成注册
     * 用户注册
     */
    async postApiAuthRegisterRaw(requestParameters: PostApiAuthRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterDtoToJSON(requestParameters['registerDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 使用邮箱验证码完成注册
     * 用户注册
     */
    async postApiAuthRegister(requestParameters: PostApiAuthRegisterRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.postApiAuthRegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 向指定邮箱发送6位数字验证码
     * 发送验证码
     */
    async postApiAuthSendCodeRaw(requestParameters: PostApiAuthSendCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling postApiAuthSendCode().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/send-code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 向指定邮箱发送6位数字验证码
     * 发送验证码
     */
    async postApiAuthSendCode(requestParameters: PostApiAuthSendCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.postApiAuthSendCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 需要登录，记录饮食信息
     * 新增饮食记录
     */
    async postDietRaw(requestParameters: PostDietRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/diet`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DietLogDtoToJSON(requestParameters['dietLogDto']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 需要登录，记录饮食信息
     * 新增饮食记录
     */
    async postDiet(requestParameters: PostDietRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.postDietRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 需要登录，参数需满足以下要求：<br>1. 运动类型必填<br>2. 开始时间不能晚于当前时间<br>3. 持续时间至少1分钟<br>4. 卡路里消耗至少1大卡
     * 创建运动记录
     */
    async postExerciseRaw(requestParameters: PostExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultLong>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/exercise`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExerciseLogDtoToJSON(requestParameters['exerciseLogDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultLongFromJSON(jsonValue));
    }

    /**
     * 需要登录，参数需满足以下要求：<br>1. 运动类型必填<br>2. 开始时间不能晚于当前时间<br>3. 持续时间至少1分钟<br>4. 卡路里消耗至少1大卡
     * 创建运动记录
     */
    async postExercise(requestParameters: PostExerciseRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultLong> {
        const response = await this.postExerciseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 需要登录，参数需符合验证规则
     * 创建生物特征记录
     */
    async postHealthBiometricRaw(requestParameters: PostHealthBiometricRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultLong>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/health/biometric`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BiometricRecordDtoToJSON(requestParameters['biometricRecordDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultLongFromJSON(jsonValue));
    }

    /**
     * 需要登录，参数需符合验证规则
     * 创建生物特征记录
     */
    async postHealthBiometric(requestParameters: PostHealthBiometricRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultLong> {
        const response = await this.postHealthBiometricRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 为当前登录用户创建新的体检提醒
     * 创建体检提醒
     */
    async postHealthCheckReminderRaw(requestParameters: PostHealthCheckReminderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/health-check-reminder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HealthCheckReminderDtoToJSON(requestParameters['healthCheckReminderDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 为当前登录用户创建新的体检提醒
     * 创建体检提醒
     */
    async postHealthCheckReminder(requestParameters: PostHealthCheckReminderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.postHealthCheckReminderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 创建健康目标
     */
    async postHealthGoalsRaw(requestParameters: PostHealthGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultLong>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/health-goals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HealthGoalDtoToJSON(requestParameters['healthGoalDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultLongFromJSON(jsonValue));
    }

    /**
     * 
     * 创建健康目标
     */
    async postHealthGoals(requestParameters: PostHealthGoalsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultLong> {
        const response = await this.postHealthGoalsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 创建服药提醒
     */
    async postMedicationReminderRaw(requestParameters: PostMedicationReminderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/medication-reminder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MedicationReminderDtoToJSON(requestParameters['medicationReminderDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 
     * 创建服药提醒
     */
    async postMedicationReminder(requestParameters: PostMedicationReminderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.postMedicationReminderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 批量创建服药提醒
     */
    async postMedicationReminderBatchRaw(requestParameters: PostMedicationReminderBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/medication-reminder/batch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['medicationReminderDto']!.map(MedicationReminderDtoToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 
     * 批量创建服药提醒
     */
    async postMedicationReminderBatch(requestParameters: PostMedicationReminderBatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.postMedicationReminderBatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 通过图片识别服药信息
     */
    async postMedicationReminderPngRaw(requestParameters: FormData, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultListMedicationReminderVo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        // headerParameters['Content-Type'] = 'multipart/form-data';

        const response = await this.request({
            path: `/medication-reminder/png`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultListMedicationReminderVoFromJSON(jsonValue));
    }

    /**
     * 
     * 通过图片识别服药信息
     */
    async postMedicationReminderPng(requestParameters: FormData, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultListMedicationReminderVo> {
        const response = await this.postMedicationReminderPngRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 需要登录，参数要求：<br>1. 入睡/醒来时间不能为空且需早于当前时间<br>2. 醒来时间需晚于入睡时间<br>3. 睡眠质量等级1-5
     * 新增睡眠记录
     */
    async postSleepRaw(requestParameters: PostSleepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultLong>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sleep`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SleepLogDtoToJSON(requestParameters['sleepLogDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultLongFromJSON(jsonValue));
    }

    /**
     * 需要登录，参数要求：<br>1. 入睡/醒来时间不能为空且需早于当前时间<br>2. 醒来时间需晚于入睡时间<br>3. 睡眠质量等级1-5
     * 新增睡眠记录
     */
    async postSleep(requestParameters: PostSleepRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultLong> {
        const response = await this.postSleepRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新当前登录用户的信息
     * 更新用户信息
     */
    async putAccountRaw(requestParameters: PutAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserInfoDtoToJSON(requestParameters['userInfoDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 更新当前登录用户的信息
     * 更新用户信息
     */
    async putAccount(requestParameters: PutAccountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.putAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新指定ID的体检提醒信息
     * 更新体检提醒
     */
    async putHealthCheckReminderIdRaw(requestParameters: PutHealthCheckReminderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putHealthCheckReminderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/health-check-reminder/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HealthCheckReminderDtoToJSON(requestParameters['healthCheckReminderDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 更新指定ID的体检提醒信息
     * 更新体检提醒
     */
    async putHealthCheckReminderId(requestParameters: PutHealthCheckReminderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.putHealthCheckReminderIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 更新服药提醒
     */
    async putMedicationReminderReminderIdRaw(requestParameters: PutMedicationReminderReminderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseResultVoid>> {
        if (requestParameters['reminderId'] == null) {
            throw new runtime.RequiredError(
                'reminderId',
                'Required parameter "reminderId" was null or undefined when calling putMedicationReminderReminderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/medication-reminder/{reminderId}`.replace(`{${"reminderId"}}`, encodeURIComponent(String(requestParameters['reminderId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MedicationReminderDtoToJSON(requestParameters['medicationReminderDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseResultVoidFromJSON(jsonValue));
    }

    /**
     * 
     * 更新服药提醒
     */
    async putMedicationReminderReminderId(requestParameters: PutMedicationReminderReminderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseResultVoid> {
        const response = await this.putMedicationReminderReminderIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetExerciseDailyCaloriesBurnedRangeEnum = {
    Week: 'WEEK',
    Month: 'MONTH',
    ThreeMonths: 'THREE_MONTHS',
    HalfYear: 'HALF_YEAR'
} as const;
export type GetExerciseDailyCaloriesBurnedRangeEnum = typeof GetExerciseDailyCaloriesBurnedRangeEnum[keyof typeof GetExerciseDailyCaloriesBurnedRangeEnum];
/**
 * @export
 */
export const GetSleepDurationRangeEnum = {
    Week: 'week',
    Month: 'month',
    _3months: '3months',
    _6months: '6months'
} as const;
export type GetSleepDurationRangeEnum = typeof GetSleepDurationRangeEnum[keyof typeof GetSleepDurationRangeEnum];
